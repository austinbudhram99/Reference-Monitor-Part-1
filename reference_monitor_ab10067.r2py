"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create and (self.Afn not in listfiles()):
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)

    else:
      self.Afile = openfile(self.Afn,True)
      data_a = self.Afile.readat(None,0)
      self.Bfile = openfile(self.Bfn,True)
      self.Bfile.writeat(data_a,0)
    self.Afile.lock = createlock()
    self.Bfile.lock = createlock()

  def writeat(self,data,offset):
    self.Bfile.lock.acquire(True)
    # Write the requested data to the B file using the sandbox's writeat call
    self.Bfile.writeat(data,offset)
    self.Bfile.lock.release()

  def readat(self,bytes,offset):
    self.Afile.lock.acquire(True)
    # Read from the A file using the sandbox's readat...
    data_a = self.Afile.readat(bytes,offset)
    self.Afile.lock.release()
    return data_a

  def close(self):
    self.Afile.lock.acquire(True)
    self.Bfile.lock.acquire(True)
    data_a = self.Afile.readat(None,0)
    data_b = self.Bfile.readat(None,0)
    if len(data_b) !=0 and data_b[0] == 'S' and data_b[-1] == 'E':
      data_b = self.Bfile.readat(None,0)
      self.Afile.writeat(data_b,0)

    self.Afile.close()
    self.Bfile.close()
    self.Afile.lock.release()
    self.Bfile.lock.release()
    removefile(self.Bfn)

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
