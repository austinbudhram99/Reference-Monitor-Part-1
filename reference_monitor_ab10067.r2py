"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
from os import error


TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Bfile.writeat(self.Afile.readat(None,0),0)
        else:
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat('SE',0)
    else:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn,True)
            self.Bfile = openfile(self.Bfn,True)
            self.Bfile.writeat(self.Afile.readat(None,0),0)
        else:
            raise FileNotFoundError
# NOTE TO SELF
  def writeat(self,data,offset):
      self.lock = createlock()
      self.lock.acquire(True)
      if offset < 0:
        raise RepyArgumentError
        self.lock.release()
      elif offset > len(self.Bfile.readat(None,0),0):
        raise SeekPastEndOfFileError
        self.lock.release()
      else:
    # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data,offset)
        self.lock.release()
# Note to self - BREAK

  def readat(self,bytes,offset):
    self.lock = createlock()
    self.lock.acquire(True)
    length = len(self.Afile.readat(None,0))
    # Read from the A file using the sandbox's readat...
    if offset < 0 or length < 0:
        raise RepyArgumentError
        self.lock.release()
    elif offset >= len(self.Afile.readat(None,0)):
        raise SeekPastEndOfFileError
        self.lock.release()
    elif bytes > length and bytes !=None:
        raise SeekPastEndOfFileError
        self.lock.release()
    elif (len(self.Afile.readat(None,0))) < offset+length) and bytes != None:
        raise RepyArgumentError
        self.lock.release()
    else:
        try:
            read_data = self.Afile.readat(bytes,offset)
            self.lock.release()
            return read_data
        except:
            raise RepyArgumentError
# note to self- BREAK
  def close(self):
    backup_data = self.Afile.readat(None,0)
    data = self.Bfile.readat(None,0)
    backup_file = self.Afn
# start with S and end with E variables
    if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
        self.Afile.close()
        self.Bfile.close()
        removefile(self.Afn)
        openfile(backup_file,True).writeat(backup_data,0)
        removefile(self.Bfn)



# Personal Note - Do not need to edit code BELOW this line

def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
